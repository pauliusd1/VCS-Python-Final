import pandas as pd
import matplotlib.pyplot as plt

""" Įvykių pradžios ir pabaigos periodų lokacijos dokumente"""

""" Skaičiuoja laikotarpio nuo x1 iki x2 vidurkį. Be to, randa laukus stulpelyje kurių negalima konvertuoti į int 
reikšmes"""
def vidurkis(x1,x2,stulp):
    ilg = x2-x1
    S = 0
    for i in range(x1, x2):
        try:
            S = S + float(df[stulp].iloc[i:i + 1])
        except:
            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!Klaida eiluteje", i)
    vid = S / ilg
    return vid

"""Pagalbinė aikotarpio įvedimo  funkcija susiejanti vartotojo įvestą laikotarpį su data lokacija dokumente """
def susieti(kint):
    match kint:
        case "pradzia":
            x1=0
        case "2018-2":
            x1 = 0
        case "2018-3":
            x1 = 68
        case "2018-4":
            x1 = 160
        case "2019-1":
            x1 = 252
        case "2019-2":
            x1 = 342
        case "2019-3":
            x1 = 433
        case "2019-4":
            x1 = 525
        case "2020-1":
            x1 = 617
        case "2020-2":
            x1 = 708
        case "2020-3":
            x1 = 799
        case "2020-4":
            x1 = 891
        case "2021-1":
            x1 = 983
        case "2021-2":
            x1 = 1073
        case "2021-3":
            x1 = 1164
        case "2021-4":
            x1 = 1256
        case "2022-1":
            x1 = 1348
        case "pabaiga":
            x1 = 1388
        case _:
          print("Neteisingai ivedete periodus - paleiskite programa is naujo")
    return x1

"""Pagalbinė laikotarpio įvedimo pagalbinė funkcija nustatanti numatytasias reikšmes jei vartotojas nieko neįvedė arba
 susiejantis laikotarpį su datos lokacija dokumente """
def priskirti(prad,pab):
 if prad =="":
  x1=0
 else:
  x1 = susieti(prad)

 if pab =="":
  x2=1388
 else:
  x2 = susieti(pab)
 return x1,x2

""" Grafikų braižymas"""
def grafikas(x1, x2, vid, stulp,x11,x12,x21,x22,x31,x32,x41,x42,x51,x52,x61,x62,x71,x72):
     dfn = df[stulp].astype(float)
     dfd = df['Dienos indeksas']
     fig = plt.figure()
     ax = fig.add_subplot(111)
     ax.plot(dfd.iloc[x1:x2], dfn.iloc[x1:x2], color='blue', linewidth=1)

     """ Bendro vidurkio braižymas"""
     mean = pd.Series(vid, index=range(x1, x2))
     ax.plot(dfd.iloc[x1:x2], mean, color='green', linewidth=3, label='Vidurkis')

     """ Įvykių vidurkių ir ivykiu braižymas"""
     if x1 <= x11 and x2 >= x12:
         vid1=vidurkis(x11,x12,stulp)
         tvid1=pd.Series(vid1, index=range(x11, x12))
         ax.plot(dfd.iloc[x11:x12], tvid1, color='red', linewidth=2)
         ax.plot(dfd.iloc[x11:x12], dfn.iloc[x11:x12], color='red', linewidth=1, label='Ivykis #1 (Tipas A)')
     if x1 < x21 and x2 > x22:
         vid2 = vidurkis(x21, x22, stulp)
         tvid2 = pd.Series(vid2, index=range(x21, x22))
         ax.plot(dfd.iloc[x21:x22], tvid2, color='red', linewidth=2)
         ax.plot(dfd.iloc[x21:x22], dfn.iloc[x21:x22], color='orange', linewidth=1, label='Įvykis #2 (Tipas D)')
     if x1 < x31 and x2 > x32:
         vid3 = vidurkis(x31, x32, stulp)
         tvid3 = pd.Series(vid3, index=range(x31, x32))
         ax.plot(dfd.iloc[x31:x32], tvid3, color='red', linewidth=2)
         ax.plot(dfd.iloc[x31:x32], dfn.iloc[x31:x32], color='cyan', linewidth=1, label='Įvykis #3 (Tipas D)')
     if x1 <= x41 and x2 >= x42:
         vid4 = vidurkis(x41, x42, stulp)
         tvid4 = pd.Series(vid4, index=range(x41, x42))
         ax.plot(dfd.iloc[x41:x42], tvid4, color='red', linewidth=2)
         ax.plot(dfd.iloc[x41:x42], dfn.iloc[x41:x42], color='magenta', linewidth=1, label='Įvykis #4 (Tipas B)')
     if x1 <= x51 and x2 >= x52:
         vid5 = vidurkis(x51, x52, stulp)
         tvid5 = pd.Series(vid5, index=range(x51, x52))
         ax.plot(dfd.iloc[x51:x52], tvid5, color='red', linewidth=2)
         ax.plot(dfd.iloc[x51:x52], dfn.iloc[x51:x52], color='black', linewidth=1, label='Įvykis #5 (Tipas C)')
     if x1 <= x61 and x2 >= x62:
         vid6 = vidurkis(x61, x62, stulp)
         tvid6 = pd.Series(vid6, index=range(x61, x62))
         ax.plot(dfd.iloc[x61:x62], tvid6, color='red', linewidth=2)
         ax.plot(dfd.iloc[x61:x62], dfn.iloc[x61:x62], color='yellow', linewidth=1, label='Įvykis #6 (Tipas D)')
     if x1 <= x71 and x2 >= x72:
         vid7 = vidurkis(x71, x72, stulp)
         tvid7 = pd.Series(vid7, index=range(x71, x72))
         ax.plot(dfd.iloc[x71:x72], tvid7, color='red', linewidth=2)
         ax.plot(dfd.iloc[x71:x72], dfn.iloc[x71:x72], color='purple', linewidth=1, label='Įvykis #7 (Tipas C)')


     ax.legend(loc='upper left', frameon=False)
     n = 30  # Keeps every 7th label
     [l.set_visible(False) for (i, l) in enumerate(ax.xaxis.get_ticklabels()) if i % n != 0]
     plt.xticks(rotation=30)
     plt.title(stulp)
     plt.show()

"""Rezultato skaitine išraiška išvedimas"""
def isvedimas(x1,x2,vid,x11,x12,x21,x22,x31,x32,x41,x42,x51,x52,x61,x62,x71,x72):
    print("----- Rezultatas-----")
    print("Laikotarpio pradzia:                 ",df['Dienos indeksas'].iloc[x1])
    print("Laikotarpio pabaiga:                 ",df['Dienos indeksas'].iloc[x2-1])
    print("Laikotarpio vidurkis:                ",round(vid,2))
    print("                                     ")

    """Įvykio rezultato skaitine išraiška išvedimas"""
    if x1 <= x11 and x2 >= x12:
        vid1 = vidurkis(x11, x12, stulp)
        print('Vidurkis Ivykio #1 (Tipas A):        ', round(vid1,2))
        print('Santykinis Ivykio #1 vidurkio pokytis', round(((vid1-vid)*100/vid),2),'%')
        print("                                     ")
    if x1 < x21 and x2 > x22:
        vid2 = vidurkis(x21, x22, stulp)
        print('Vidurkis Ivykio #2 (Tipas D):        ', round(vid2, 2))
        print('Santykinis Ivykio #2 vidurkio pokytis', round(((vid2 - vid) * 100 / vid), 2), '%')
        print("                                     ")
    if x1 < x31 and x2 > x32:
        vid3 = vidurkis(x31, x32, stulp)
        print('Vidurkis Ivykio #3 (Tipas D):        ', round(vid3, 2))
        print('Santykinis Ivykio #3 vidurkio pokytis', round(((vid3 - vid) * 100 / vid), 2), '%')
        print("                                     ")
    if x1 <= x41 and x2 >= x42:
        vid4 = vidurkis(x41, x42, stulp)
        print('Vidurkis Ivykio #4 (Tipas B):        ', round(vid4, 2))
        print('Santykinis Ivykio #4 vidurkio pokytis', round(((vid4 - vid) * 100 / vid), 2), '%')
        print("                                     ")
    if x1 <= x51 and x2 >= x52:
        vid5 = vidurkis(x51, x52, stulp)
        print('Vidurkis Ivykio #5 (Tipas C):        ', round(vid5, 2))
        print('Santykinis Ivykio #5 vidurkio pokytis', round(((vid5 - vid) * 100 / vid), 2), '%')
        print("                                     ")
    if x1 <= x61 and x2 >= x62:
        vid6 = vidurkis(x61, x62, stulp)
        print('Vidurkis Ivykio #6 (Tipas D):        ', round(vid6, 2))
        print('Santykinis Ivykio #6 vidurkio pokytis', round(((vid6 - vid) * 100 / vid), 2), '%')
        print("                                     ")

    if x1 <= x71 and x2 >= x72:
        vid7 = vidurkis(x71, x72, stulp)
        print('Vidurkis Ivykio #7 (Tipas C):        ', round(vid7, 2))
        print('Santykinis Ivykio #7 vidurkio pokytis', round(((vid7 - vid) * 100 / vid), 2), '%')
        print("                                     ")

"""Funkcija transformuoti laika iš string į int, tuo pačiu ir sukuriant naują stulpelį"""
def isekundes(x1,x2,stulp='Vidutinis laikas puslapyje'):
    L= []
    k=0
    for i in range(x1, x2):
        if i>=10:
            k=1
        if i >= 100:
            k = 2
        if i >= 1000:
            k = 3
        try:
            kint = (df[stulp].iloc[i:i + 1]).to_string()
            sec= int(kint[11+k:13+k])
            min= int(kint[8+k:10+k])
            h = int(kint[5+k:7+k])
            laikas=h*3600+min*60+sec
            L.append(laikas)
        except:
            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!Klaida eiluteje", i)
    SL=pd.Series(L)
    df['Vidutinis puslapio laikas']=SL


""" Įvykių pradžios ir pabaigos periodų lokacijos dokumente"""
x11, x12 = (280, 304)
x21, x22 = (632, 656)
x31, x32 = (898, 922)
x41, x42 = (1050, 1074)
x51, x52 = (1128, 1152)
x61, x62 = (1164, 1188)
x71, x72 = (1275, 1298)


